{"version":3,"sources":["components/SearchField/SearchField.js","components/Header/Header.js","components/Card/Card.js","components/CardList/CardList.js","components/Main/Scroll.js","components/Main/Main.js","components/Footer/Footer.js","components/ErrorBoundry/ErrorBoundry.js","container/App.js","serviceWorker.js","index.js"],"names":["SearchField","onInputSearch","className","type","placeholder","onChange","Header","Card","id","name","email","src","alt","CardList","robots","map","user","i","key","Scroll","props","children","Main","Footer","ErrorBoundy","state","error","info","this","setState","React","Component","App","e","searchField","target","value","fetch","then","res","json","data","catch","err","console","log","filterRobots","filter","robot","toLowerCase","includes","ErrorBoundry","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0RAWeA,G,MATK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACrB,OACG,yBAAKC,UAAU,OACd,2BAAOA,UAAU,mCAAmCC,KAAK,SAASC,YAAY,gBAAgBC,SAAUJ,OCQ9FK,EAVA,SAAC,GAAqB,IAApBL,EAAmB,EAAnBA,cAChB,OACE,yBAAKC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACK,kBAAC,EAAD,CAAaD,cAAeA,IAC5B,+BCMMM,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACtB,OACE,yBAAKR,UAAY,uDAChB,yBAAKS,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAI,UACzD,6BACC,4BAAKH,GACL,2BAAIC,MCaMG,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAAC,EAAD,CACFC,IAAKD,EACJT,GAAIM,EAAOG,GAAGT,GACdC,KAAMK,EAAOG,GAAGR,KAChBC,MAAOI,EAAOG,GAAGP,aCFfS,G,MARA,SAACC,GACf,OACE,yBAAKZ,GAAG,UACNY,EAAMC,YCOIC,EAVF,SAAC,GAAc,IAAbR,EAAY,EAAZA,OACd,OACE,6BACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUA,OAAQA,OCKRS,EATA,WACd,OACE,yBAAKrB,UAAU,OACd,6BADD,+BCeYsB,E,kDAjBd,WAAYJ,GAAQ,IAAD,8BAClB,cAAMA,IACDK,MAAQ,CACZC,OAAM,GAHW,E,8DAMDA,EAAMC,GACvBC,KAAKC,SAAS,CAACH,OAAM,M,+BAGrB,OACE,6BACCE,KAAKH,MAAMC,MAAQ,oDAAgCE,KAAKR,MAAMC,c,GAbzCS,IAAMC,WC0CjBC,E,kDApCb,aAAe,IAAD,8BACb,gBAOD/B,cAAgB,SAACgC,GACf,EAAKJ,SAAS,CAACK,YAAYD,EAAEE,OAAOC,SAPrC,EAAKX,MAAQ,CACZX,OAAQ,GACNoB,YAAY,IAJF,E,gEAYO,IAAD,OACnBG,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAI,EAAKZ,SAAS,CAACf,OAAO2B,OACnCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAGjB,IAAD,EACwBf,KAAKH,MAA3BX,EADF,EACEA,OAAOoB,EADT,EACSA,YACRY,EAAehC,EAAOiC,QAAO,SAAAC,GAAK,OAAIA,EAAMvC,KAAKwC,cAAcC,SAAShB,EAAYe,kBAC1F,OACI,yBAAK/C,UAAU,MAEX,kBAAC,EAAD,CAAQD,cAAe2B,KAAK3B,gBAC5B,kBAACkD,EAAD,KACGrC,EAAOsC,OAAS,kBAAC,EAAD,CAAMtC,OAAQgC,IAAmB,4CAEpD,kBAAC,EAAD,W,GA9BIf,a,MCKEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAAhB,GACLkB,QAAQlB,MAAMA,EAAM0C,c","file":"static/js/main.ff2a72bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchField = ({onInputSearch}) => {\r\n\treturn (\r\n\t\t\t\t<div className=\"pa2\">\r\n\t\t\t\t\t<input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={onInputSearch} />\r\n\t\t\t\t</div>\r\n\t\t\t\r\n\t\t)\r\n}\r\n\r\nexport default SearchField","import React from 'react';\r\nimport SearchField from '../SearchField/SearchField';\r\n\r\nconst Header = ({onInputSearch}) => {\r\n\treturn(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t      \t\t<SearchField onInputSearch={onInputSearch} />\r\n\t      \t\t<hr />\r\n      \t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n\treturn(\r\n\t\t\t<div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt=\"Robot\" />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trobots.map((user,i) => {\r\n\t\t\t\t\t\t\treturn <Card \r\n\t\t\t\t\t\t\t\t\t  \tkey={i} \r\n\t\t\t\t\t\t\t\t\t    id={robots[i].id} \r\n\t\t\t\t\t\t\t\t\t    name={robots[i].name} \r\n\t\t\t\t\t\t\t\t\t    email={robots[i].email}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\nimport './scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t\t<div id=\"scroll\">\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll","import React from 'react';\r\nimport CardList from '../CardList/CardList';\r\nimport Scroll from './Scroll'\r\nconst Main = ({robots}) => {\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={robots} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Main","import React from 'react';\r\n\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t\t<div className=\"pa3\">\r\n\t\t\t\t<hr />\r\n\t\t\t\tDone with love @Ali Hamdan\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\n\r\nclass ErrorBoundy extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\terror:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info) {\r\n\t\tthis.setState({error:true})\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t{this.state.error ? <h1>Oooops Error Occured</h1> : this.props.children}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default ErrorBoundy","import React, {Component} from 'react';\nimport './App.css';\nimport Header from '../components/Header/Header';\nimport Main from '../components/Main/Main';\nimport Footer from '../components/Footer/Footer';\nimport ErrorBoundry from '../components/ErrorBoundry/ErrorBoundry'\n\nclass App extends Component {\n  constructor() {\n  \tsuper();\n  \tthis.state = {\n  \t\trobots: [],\n      searchField:''\n  \t}\n  }\n\n  onInputSearch = (e) => {\n    this.setState({searchField:e.target.value})\n  }\n  \n  componentDidMount() {\n  \tfetch('https://jsonplaceholder.typicode.com/users')\n  \t.then(res=>res.json())\n  \t.then(data => this.setState({robots:data}))\n  \t.catch(err => console.log(err))\n  }\n\n  render() {\n      const {robots,searchField} = this.state;\n      const filterRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n      return (\n          <div className=\"tc\">\n            \n              <Header onInputSearch={this.onInputSearch} />\n              <ErrorBoundry>\n                {robots.length ? <Main robots={filterRobots} /> : <h1>Loading ...</h1> }\n              </ErrorBoundry>\n              <Footer />\n           \n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}